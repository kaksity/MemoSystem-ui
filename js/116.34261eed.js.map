{"version":3,"file":"js/116.34261eed.js","mappings":"mLAAO,SAASA,EAAaC,EAAIC,GAC/B,OAAOD,EAAGE,QAAO,SAAUC,EAAIC,GAE7B,OADCD,EAAGC,EAAEH,IAAQE,EAAGC,EAAEH,KAAS,IAAII,KAAKD,GAC9BD,CACT,GAAG,CAAC,EACN,C,+UCSA,MAAMG,GAAQC,EAAAA,EAAAA,MAERC,GAAeC,EAAAA,EAAAA,KAAS,KAC5B,MAAMC,EAAO,GACPC,EAAcL,EAAMM,UAAUC,OAUpC,OARIF,EAAc,GAChBD,EAAKL,KAAK,0BAGQ,IAAhBM,GACFD,EAAKL,KAAK,kBAGLK,CAAI,I,+RCzBb,MAAMI,EAAc,EAEpB,O,oPCQA,MAAMC,GAAgBC,EAAAA,EAAAA,IAAI,IAEpBC,GAAeC,EAAAA,EAAAA,MAEfC,GAASH,EAAAA,EAAAA,IAAI,IAEbI,GAAOC,EAAAA,EAAAA,IAAS,CACpBC,SAAU,GACVC,SAAU,GACVC,SAAU,GACVC,OAAQ,KAGV,SAASC,IACPP,EAAOQ,MAAQ,CAAC,CAClB,CAEA,SAASC,IACPR,EAAKE,SAAW,GAChBF,EAAKG,SAAW,GAChBH,EAAKI,SAAW,GAChBJ,EAAKS,KAAO,EACd,CAEAC,eAAeC,IACb,IACE,MAAM,KAAEC,SAAeC,EAAAA,EAAAA,IAAQ,UAC/BlB,EAAcY,MAAQK,EAAKE,KAAI,EAAGC,KAAIC,KAAMC,MACnC,CACLF,KACAE,WAKN,CAFE,MAAOC,GACPrB,EAAaqB,MAAMA,EAAMC,OAC3B,CACF,EAEAC,EAAAA,EAAAA,KAAUV,gBACFC,GAAU,IAGlB,MAAMU,EAASA,KACbf,IACAO,EAAAA,EAAAA,KAAS,SAAU,IAAKb,EAAMK,OAAQL,EAAKK,OAAOU,KAAMO,MAAK,EAAGC,cAC9D1B,EAAa2B,QAAQD,GACrBf,GAAa,IACZiB,OAAOP,IACJA,EAAMnB,OACRA,EAAOQ,OAAQ5B,EAAAA,EAAAA,GAAYuC,EAAMnB,OAAQ,SAEzCF,EAAaqB,MAAMA,EAAMC,OAC3B,GACA,E,gzCC/DJ,MAAMzB,EAAc,EAEpB,O","sources":["webpack://admin-one-vue-tailwind/./src/helpers/group-errors.js","webpack://admin-one-vue-tailwind/./src/components/Field.vue","webpack://admin-one-vue-tailwind/./src/components/Field.vue?7442","webpack://admin-one-vue-tailwind/./src/views/User/CreateUser.vue","webpack://admin-one-vue-tailwind/./src/views/User/CreateUser.vue?efa3"],"sourcesContent":["export function groupErrors (xs, key) {\n  return xs.reduce(function (rv, x) {\n    (rv[x[key]] = rv[x[key]] || []).push(x)\n    return rv\n  }, {})\n};\n","<script setup>\nimport { computed, useSlots } from 'vue'\n\ndefineProps({\n  label: {\n    type: String,\n    default: null\n  },\n  help: {\n    type: String,\n    default: null\n  }\n})\n\nconst slots = useSlots()\n\nconst wrapperClass = computed(() => {\n  const base = []\n  const slotsLength = slots.default().length\n\n  if (slotsLength > 1) {\n    base.push('grid grid-cols-1 gap-3')\n  }\n\n  if (slotsLength === 2) {\n    base.push('md:grid-cols-2')\n  }\n\n  return base\n})\n</script>\n\n<template>\n  <div class=\"mb-6 last:mb-0\">\n    <label\n      v-if=\"label\"\n      class=\"block font-bold mb-2\"\n    >{{ label }}</label>\n    <div :class=\"wrapperClass\">\n      <slot />\n    </div>\n    <div\n      v-if=\"help\"\n      class=\"text-xs text-red-500 dark:text-red-400 mt-1\"\n    >\n      {{ help[0].message }}\n    </div>\n  </div>\n</template>\n","import script from \"./Field.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Field.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { onMounted, reactive, ref } from 'vue'\nimport { mdiBallot } from '@mdi/js'\nimport MainSection from '@/components/MainSection.vue'\nimport CardComponent from '@/components/CardComponent.vue'\nimport Field from '@/components/Field.vue'\nimport Control from '@/components/Control.vue'\nimport Divider from '@/components/Divider.vue'\nimport JbButton from '@/components/JbButton.vue'\nimport JbButtons from '@/components/JbButtons.vue'\nimport Api from '@/api'\nimport { useToast } from 'vue-toastification'\nimport { groupErrors } from '@/helpers'\nconst selectOptions = ref([])\n\nconst toastMessage = useToast()\n\nconst errors = ref([])\n\nconst form = reactive({\n  fullName: '',\n  username: '',\n  password: '',\n  roleId: ''\n})\n\nfunction clearError () {\n  errors.value = {}\n}\n\nfunction clearInputs () {\n  form.fullName = ''\n  form.username = ''\n  form.password = ''\n  form.role = ''\n}\n\nasync function getRoles () {\n  try {\n    const { data } = await Api.get('/roles')\n    selectOptions.value = data.map(({ id, name: label }) => {\n      return {\n        id,\n        label\n      }\n    })\n  } catch (error) {\n    toastMessage.error(error.detail)\n  }\n}\n\nonMounted(async () => {\n  await getRoles()\n})\n\nconst submit = () => {\n  clearError()\n  Api.post('/users', { ...form, roleId: form.roleId.id }).then(({ message }) => {\n    toastMessage.success(message)\n    clearInputs()\n  }).catch((error) => {\n    if (error.errors) {\n      errors.value = groupErrors(error.errors, 'field')\n    } else {\n      toastMessage.error(error.detail)\n    }\n  })\n}\n</script>\n<template>\n  <div>\n    <main-section>\n      <card-component\n        title=\"Forms\"\n        :icon=\"mdiBallot\"\n        form\n        @submit.prevent=\"submit\"\n      >\n        <field\n          label=\"Full Name\"\n          :help=\"errors.fullName\"\n        >\n          <control\n            v-model=\"form.fullName\"\n          />\n        </field>\n        <field\n          label=\"Role\"\n          :help=\"errors.roleId\"\n        >\n          <control\n            v-model=\"form.roleId\"\n            :options=\"selectOptions\"\n          />\n        </field>\n        <field\n          label=\"Username\"\n          :help=\"errors.username\"\n        >\n          <control\n            v-model=\"form.username\"\n            name=\"username\"\n            autocomplete=\"username\"\n          />\n        </field>\n        <field\n          label=\"Password\"\n          :help=\"errors.password\"\n        >\n          <control\n            v-model=\"form.password\"\n            type=\"password\"\n            name=\"password\"\n            autocomplete=\"current-password\"\n          />\n        </field>\n        <divider />\n        <jb-buttons>\n          <jb-button\n            type=\"submit\"\n            color=\"info\"\n            label=\"Submit\"\n          />\n        </jb-buttons>\n      </card-component>\n    </main-section>\n  </div>\n</template>\n","import script from \"./CreateUser.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CreateUser.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["groupErrors","xs","key","reduce","rv","x","push","slots","useSlots","wrapperClass","computed","base","slotsLength","default","length","__exports__","selectOptions","ref","toastMessage","useToast","errors","form","reactive","fullName","username","password","roleId","clearError","value","clearInputs","role","async","getRoles","data","Api","map","id","name","label","error","detail","onMounted","submit","then","message","success","catch"],"sourceRoot":""}
{"version":3,"file":"js/387.f7f4a465.js","mappings":"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","sources":["webpack://admin-one-vue-tailwind/./src/components/Field.vue","webpack://admin-one-vue-tailwind/./src/components/Field.vue?7442","webpack://admin-one-vue-tailwind/./src/views/Memo/MemoComments.vue","webpack://admin-one-vue-tailwind/./src/views/Memo/MemoComments.vue?3b99"],"sourcesContent":["<script setup>\nimport { computed, useSlots } from 'vue'\n\ndefineProps({\n  label: {\n    type: String,\n    default: null\n  },\n  help: {\n    type: String,\n    default: null\n  }\n})\n\nconst slots = useSlots()\n\nconst wrapperClass = computed(() => {\n  const base = []\n  const slotsLength = slots.default().length\n\n  if (slotsLength > 1) {\n    base.push('grid grid-cols-1 gap-3')\n  }\n\n  if (slotsLength === 2) {\n    base.push('md:grid-cols-2')\n  }\n\n  return base\n})\n</script>\n\n<template>\n  <div class=\"mb-6 last:mb-0\">\n    <label\n      v-if=\"label\"\n      class=\"block font-bold mb-2\"\n    >{{ label }}</label>\n    <div :class=\"wrapperClass\">\n      <slot />\n    </div>\n    <div\n      v-if=\"help\"\n      class=\"text-xs text-gray-500 dark:text-gray-400 mt-1\"\n    >\n      {{ help }}\n    </div>\n  </div>\n</template>\n","import script from \"./Field.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Field.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { ref, onMounted, reactive } from 'vue'\nimport { mdiBallot } from '@mdi/js'\nimport MainSection from '@/components/MainSection.vue'\nimport CardComponent from '@/components/CardComponent.vue'\nimport Divider from '@/components/Divider.vue'\nimport Api from '@/api'\nimport { useToast } from 'vue-toastification'\nimport { useRoute } from 'vue-router'\nimport Field from '@/components/Field.vue'\nimport Control from '@/components/Control.vue'\nimport JbButton from '@/components/JbButton.vue'\nimport JbButtons from '@/components/JbButtons.vue'\n\nconst routes = useRoute()\nconst memo = ref({})\nconst receipients = ref([])\nconst users = ref([])\nconst selectedReceipients = ref([])\nconst memoComments = ref([])\nconst receipientSelectBox = ref({})\nconst toastMessage = useToast()\nconst memoId = ref(routes.params.memoId)\n\nconst form = reactive({\n  comment: '',\n  receipients: null\n})\n\nfunction setReceipient () {\n  const isExist = selectedReceipients.value.find(t => t.receipient === receipientSelectBox.value.id)\n  if (!isExist) {\n    selectedReceipients.value.push({\n      receipient: receipientSelectBox.value.id,\n      name: receipientSelectBox.value.label\n    })\n  }\n}\nfunction removeSelectedReciepients (id) {\n  const newSelectedReceipients = []\n  selectedReceipients.value.forEach(item => {\n    if (item.receipient !== id) {\n      newSelectedReceipients.push(item)\n    }\n  })\n  selectedReceipients.value = newSelectedReceipients\n}\nasync function getMemoReceipients (memoId) {\n  try {\n    const response = await Api.get(`/memos/${memoId}/receipients`)\n    receipients.value = response.data.receipients\n  } catch (error) {\n    toastMessage.error(error.message)\n  }\n}\nasync function getMemoDetails (memoId) {\n  try {\n    const response = await Api.get(`/memos/${memoId}`)\n    memo.value = response.data.memo\n  } catch (error) {\n    toastMessage.error(error.message)\n  }\n}\nasync function getUsers () {\n  try {\n    const response = await Api.get('/users')\n    response.data.forEach(element => {\n      users.value.push({\n        id: element.id,\n        label: element.fullName\n      })\n    })\n  } catch (error) {\n    toastMessage.error(error.message)\n  }\n}\n\nasync function submitComment () {\n  if (selectedReceipients.value.length === 0) {\n    toastMessage.error('You must select at least 1 receipient')\n    return\n  }\n  if (form.comment === '') {\n    toastMessage.error('Comment is required')\n    return\n  }\n  try {\n    form.receipients = selectedReceipients\n    const response = await Api.post(`/memos/${memoId.value}/comments`, form)\n\n    toastMessage.success(response.message)\n    await initializeData()\n    clearInputFields()\n  } catch (error) {\n    toastMessage.error(error.message)\n  }\n}\nasync function getMemoComments (memoId) {\n  try {\n    const response = await Api.get(`/memos/${memoId}/comments`)\n    memoComments.value = response.data.memoComments\n  } catch (error) {\n    toastMessage.error(error.message)\n  }\n}\nasync function deleteMemoComment (id) {\n  try {\n    const response = await Api.delete(`/memos/comments/${id}`)\n    toastMessage.success(response.message)\n    await getMemoComments(memoId.value)\n  } catch (error) {\n    toastMessage.error(error.message)\n  }\n}\nfunction clearInputFields () {\n  form.comment = ''\n  selectedReceipients.value = []\n}\nasync function initializeData () {\n  await getMemoDetails(memoId.value)\n  await getMemoComments(memoId.value)\n  await getMemoReceipients(memoId.value)\n}\nonMounted(async () => {\n  await initializeData()\n  getUsers()\n})\n\n</script>\n<template>\n  <div>\n    <main-section>\n      <card-component\n        title=\"Memo Details\"\n        :icon=\"mdiBallot\"\n        form\n      >\n        <field\n          v-if=\"receipients.length\"\n          label=\"Recipients\"\n        >\n          <span\n            v-for=\"receipient in receipients\"\n            :key=\"receipient.receipient\"\n            class=\"inline-block px-2 py-1\"\n          >\n            {{ receipient.user.fullName }}\n          </span>\n        </field>\n        <divider />\n        <field label=\"Memo Title\">\n          {{ memo.title }}\n        </field>\n        <divider />\n        <field label=\"Date\">\n          {{ memo.date }}\n        </field>\n        <divider />\n        <field label=\"Memo Comments\">\n          <div\n            v-for=\"comment in memoComments\"\n            :key=\"comment.id\"\n          >\n            <div class=\"px-2 py-1\">\n              <div class=\"\">\n                {{ comment.commentBy }} on <span class=\"text-sm\">{{ comment.date }}</span> <button\n                  class=\"inline-block bg-red-700 p-2 rounded-sm mr-2 text-white-700\"\n                  @click=\"deleteMemoComment(comment.id)\"\n                >\n                  X\n                </button>\n              </div>\n              <div class=\"text-gray-500\">\n                {{ comment.message }}\n              </div>\n            </div>\n          </div>\n        </field>\n        <divider />\n        <field label=\"Receipient\">\n          <control\n            v-model=\"receipientSelectBox\"\n            :options=\"users\"\n            @change=\"setReceipient\"\n          />\n        </field>\n        <div\n          v-if=\"selectedReceipients.length\"\n          class=\"bg-opacity-50 p-3 dark:bg-gray-800\"\n        >\n          <span\n            v-for=\"receipient in selectedReceipients\"\n            :key=\"receipient.receipient\"\n            class=\"inline-block px-2 py-1 rounded-sm mr-2 text-sm dark:bg-gray-700 light:bg-gray-300\"\n          >\n            {{ receipient.name }} <span><button\n              class=\"inline-block bg-red-700 p-1 rounded-sm mr-2 text-white-700\"\n              @click=\"removeSelectedReciepients(receipient.receipient)\"\n            >X</button></span>\n          </span>\n        </div>\n        <divider />\n        <field\n          label=\"Comment\"\n        >\n          <control\n            v-model=\"form.comment\"\n            row=\"3\"\n            type=\"textarea\"\n          />\n        </field>\n        <divider />\n        <jb-buttons>\n          <jb-button\n            type=\"submit\"\n            color=\"info\"\n            label=\"Send\"\n            @click=\"submitComment\"\n          />\n        </jb-buttons>\n      </card-component>\n    </main-section>\n  </div>\n</template>\n","import script from \"./MemoComments.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MemoComments.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["slots","useSlots","wrapperClass","computed","base","slotsLength","default","length","push","__exports__","routes","useRoute","memo","ref","receipients","users","selectedReceipients","memoComments","receipientSelectBox","toastMessage","useToast","memoId","params","form","reactive","comment","setReceipient","isExist","value","find","t","receipient","id","name","label","removeSelectedReciepients","newSelectedReceipients","forEach","item","async","getMemoReceipients","response","Api","data","error","message","getMemoDetails","getUsers","element","fullName","submitComment","success","initializeData","clearInputFields","getMemoComments","deleteMemoComment","onMounted"],"sourceRoot":""}